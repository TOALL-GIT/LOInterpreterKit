// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios15.1-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name LOInterpreterKit
// swift-module-flags-ignorable:  -interface-compiler-version 6.1.2
import AgoraRtcKit
import Combine
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum LOLogLevel : Swift.Int, Swift.Comparable {
  case verbose
  case debug
  case info
  case warning
  case error
  public static func < (lhs: LOInterpreterKit.LOLogLevel, rhs: LOInterpreterKit.LOLogLevel) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct LOInterpreterLogger {
  public static var logLevel: LOInterpreterKit.LOLogLevel
  public static var prefix: Swift.String
  public static var outputHandler: ((Swift.String) -> Swift.Void)?
  public static func verbose(_ msg: @autoclosure () -> Swift.String, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func debug(_ msg: @autoclosure () -> Swift.String, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func info(_ msg: @autoclosure () -> Swift.String, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func warning(_ msg: @autoclosure () -> Swift.String, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
  public static func error(_ msg: @autoclosure () -> Swift.String, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line)
}
public enum LORecordingState {
  case initial
  case joiningChannel
  case joined
  case streaming
  case streamMessageReceived(LOInterpreterKit.LOInterpreterReciveMessage)
  case failure(LOInterpreterKit.LOInterpreterError)
  case didLeaveChannel
  case stoppedByBLE(type: Swift.Int, sessionId: Foundation.Data, status: Swift.UInt8)
}
public struct LOInterpreterHistoryModel {
  public var historyId: Swift.Int64
  public var title: Swift.String
  public var createTime: Foundation.Date
  public var type: Swift.Int
}
public struct LOInterpreterHistoryDetailModel : Swift.Codable {
  public var historyId: Swift.Int64
  public var title: Swift.String
  public var sourceLanguage: Swift.String
  public var targetLanguage: Swift.String
  public var historyDetailDataArray: [LOInterpreterKit.LOInterpreterDetailMsg]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LOInterpreterDetailMsg : Swift.Codable {
  public var targetText: Swift.String
  public var sourceText: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class LOInterpreterDBManager {
  public static let shared: LOInterpreterKit.LOInterpreterDBManager
  public func insertInterpretationConversation(userId: Swift.Int64, type: Swift.Int = -1, title: Swift.String, sourceLanguage: Swift.String, targetLanguage: Swift.String, createTime: Foundation.Date, queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Int64) -> Swift.Void)
  public func queryInterpretationConversations(userId: Swift.Int64, type: Swift.Int = -1, queue: Dispatch.DispatchQueue = .main, completion: @escaping ([LOInterpreterKit.LOInterpreterHistoryModel]) -> Swift.Void)
  public func queryInterpretationConversationsWithTitle(userId: Swift.Int64, type: Swift.Int = -1, title: Swift.String, queue: Dispatch.DispatchQueue = .main, completion: @escaping ([LOInterpreterKit.LOInterpreterHistoryModel]) -> Swift.Void)
  public func queryInterpretationConversationDetail(userId: Swift.Int64, historyId: Swift.Int64, queue: Dispatch.DispatchQueue = .main, completion: @escaping (LOInterpreterKit.LOInterpreterHistoryDetailModel?) -> Swift.Void)
  public func deleteInterpretationConversation(userId: Swift.Int64, historyId: Swift.Int64, queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Int) -> Swift.Void)
  public func updateTitle(userId: Swift.Int64, historyId: Swift.Int64, title: Swift.String, queue: Dispatch.DispatchQueue = .main, completion: @escaping (Swift.Int) -> Swift.Void)
  @objc deinit
}
final public class LOInterpreterCore {
  final public let translationPublisher: Combine.PassthroughSubject<LOInterpreterKit.LOInterpreterReciveMessage, Swift.Never>
  final public let streamingStatePublisher: Combine.PassthroughSubject<LOInterpreterKit.LORecordingState, Swift.Never>
  public init(config: LOInterpreterKit.LOInterpreterConfig)
  final public func start()
  final public func stop()
  final public func muteRemoteAudioStream(_ mute: Swift.Bool)
  @objc deinit
}
public struct LOInterpretationType : Swift.Equatable {
  public let rawValue: Swift.Int
  public let equityType: Swift.String
  public let graphName: Swift.String
  public static let doubleTranslate: LOInterpreterKit.LOInterpretationType
  public static let singTranslate: LOInterpreterKit.LOInterpretationType
  public static func custom(rawValue: Swift.Int, equityType: Swift.String, graphName: Swift.String) -> LOInterpreterKit.LOInterpretationType
  public static func == (a: LOInterpreterKit.LOInterpretationType, b: LOInterpreterKit.LOInterpretationType) -> Swift.Bool
}
public enum LOAudioInputMode {
  case microphone
  case ble
  public static func == (a: LOInterpreterKit.LOAudioInputMode, b: LOInterpreterKit.LOAudioInputMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct LOInterpreterConfig {
  public let audioInputMode: LOInterpreterKit.LOAudioInputMode
  public let userId: Swift.Int
  public let sourceLanguage: Swift.String
  public let targetLanguage: Swift.String
  public let speechLanguage: Swift.String
  public let single: Swift.Bool?
  public let type: LOInterpreterKit.LOInterpretationType
  public let timeout: Foundation.TimeInterval
  public let isMute: Swift.Bool
  public let domain: Swift.String
  public let dynamicDomain: Swift.String
  public let conversationPrefix: Swift.String
  public let paths: [Swift.String : Any]?
  public let params: [Swift.String : Any]?
  public init(audioInputMode: LOInterpreterKit.LOAudioInputMode, userId: Swift.Int, sourceLanguage: Swift.String, targetLanguage: Swift.String, speechLanguage: Swift.String, single: Swift.Bool = true, type: LOInterpreterKit.LOInterpretationType, timeout: Foundation.TimeInterval = 60 * 60, mute: Swift.Bool = true, conversationPrefix: Swift.String = "", domain: Swift.String, dynamicDomain: Swift.String, paths: [Swift.String : Any]? = nil, params: [Swift.String : Any]? = nil)
}
public struct LOInterpreterReciveMessage : Swift.Codable {
  public var isFinal: Swift.Bool
  public var streamId: Swift.Int
  public var messageId: Swift.String
  public var dataType: Swift.String
  public var textTs: Swift.Int
  public var text: Swift.String
  public var syncTime: Swift.Int
  public var languageCode: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum LOUserOfflineReason : Swift.Int {
  case quit
  case dropped
  case becomeAudience
  case unknow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LOTokenError : Swift.Error {
  case requestFailed(reason: Swift.String)
  case invalidResponse
}
public enum LOStreamError : Swift.Error {
  case streamMessageError
  case unknown
  case offline(uid: Swift.Int, reason: LOInterpreterKit.LOUserOfflineReason)
}
public enum LOAuthError : Swift.Error {
  case generateFailed(reason: Swift.String)
  case startFailed(reason: Swift.String)
  case leaveFailed(reason: Swift.String)
}
public enum LOInterpreterError : Swift.Error {
  case authorize(error: LOInterpreterKit.LOAuthError)
  case token(error: LOInterpreterKit.LOTokenError)
  case stream(error: LOInterpreterKit.LOStreamError)
  case joinChannelFailure(error: Swift.Int)
  case joinChannelTimeout
  case permissionDenied(type: Swift.String)
  case unknown(any Swift.Error)
}
public struct LOInterpretationDetailDBModel {
}
@_hasMissingDesignatedInitializers public class LOInterpreterDetailDBManager {
  public static let shared: LOInterpreterKit.LOInterpreterDetailDBManager
  public func insertInterpretation(_ interpretation: LOInterpreterKit.LOInterpretationDetailDBModel, userId: Swift.Int64, queue: Dispatch.DispatchQueue = .main, completion: ((Swift.Int64) -> Swift.Void)? = nil)
  public func updateInterpretationSourceText(with id: Swift.Int64, sourceText: Swift.String, queue: Dispatch.DispatchQueue = .main, completion: ((Swift.Int) -> Swift.Void)? = nil)
  public func updateInterpretationTargetText(with id: Swift.Int64, targetText: Swift.String, queue: Dispatch.DispatchQueue = .main, completion: ((Swift.Int) -> Swift.Void)? = nil)
  public func queryInterpretation(with id: Swift.Int64, queue: Dispatch.DispatchQueue = .main, completion: @escaping (LOInterpreterKit.LOInterpretationDetailDBModel?) -> Swift.Void)
  public func queryInterpretations(userId: Swift.Int64, type: Swift.Int = -1, queue: Dispatch.DispatchQueue = .main, completion: @escaping ([LOInterpreterKit.LOInterpretationDetailDBModel]) -> Swift.Void)
  public func queryInterpretationsOnePage(userId: Swift.Int64, pageNumber: Swift.Int, pageSize: Swift.Int, queue: Dispatch.DispatchQueue = .main, completion: @escaping ([LOInterpreterKit.LOInterpretationDetailDBModel]) -> Swift.Void)
  public func queryInterpretations(userId: Swift.Int64, historyId: Swift.Int64, queue: Dispatch.DispatchQueue = .main, completion: @escaping ([LOInterpreterKit.LOInterpretationDetailDBModel]) -> Swift.Void)
  public func deleteInterpretationsFromHistory(userId: Swift.Int64, historyId: Swift.Int64, queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public func clearAllInterpretations(userId: Swift.Int64, type: Swift.Int = -1, queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
extension LOInterpreterKit.LOLogLevel : Swift.Hashable {}
extension LOInterpreterKit.LOLogLevel : Swift.RawRepresentable {}
extension LOInterpreterKit.LOAudioInputMode : Swift.Equatable {}
extension LOInterpreterKit.LOAudioInputMode : Swift.Hashable {}
extension LOInterpreterKit.LOUserOfflineReason : Swift.Equatable {}
extension LOInterpreterKit.LOUserOfflineReason : Swift.Hashable {}
extension LOInterpreterKit.LOUserOfflineReason : Swift.RawRepresentable {}
